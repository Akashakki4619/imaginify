import axios from 'axios';
import userModel from '../models/userModel.js';
import FormData from 'form-data';

export const generateImage = async (req, res) => {
  try {
    console.log("Request Body:", req.body);

    // Extract userId and "promt" from the request body.
    // (Your client sends "promt", but the API expects "prompt".)
    const { userId, promt } = req.body;
    if (!promt) {
      return res.json({ success: false, message: 'Missing details4' });
    }

    // Find the user by the id attached by the authentication middleware
    const user = await userModel.findById(userId);
    if (!user) {
      return res.json({ success: false, message: 'User not found' });
    }

    // Check for available credits
    if (user.creditBalance <= 0) {
      return res.json({ success: false, message: 'No Credit balance', creditBalance: user.creditBalance });
    }

    console.log("User credit before image generation:", user.creditBalance);

    // Prepare form-data for the Clipdrop API.
    // Map the "promt" value to the "prompt" key required by the API.
    const formData = new FormData();
    formData.append('prompt', promt);

    // Get the headers generated by form-data (including the content-type with boundary)
    const formHeaders = formData.getHeaders();

    // Make the request to the external API with proper headers
    const { data } = await axios.post('https://clipdrop-api.co/text-to-image/v1', formData, {
      headers: {
        ...formHeaders,
        'x-api-key': process.env.CLIPDROP_API,
      },
      responseType: 'arraybuffer'
    });

    // Convert binary image data to base64
    const base64Image = Buffer.from(data, 'binary').toString('base64');
    const resultImage = `data:image/png;base64,${base64Image}`;

    // Deduct one credit from the user's balance
    await userModel.findByIdAndUpdate(user._id, { creditBalance: user.creditBalance - 1 });
    console.log("User credit after image generation:", user.creditBalance - 1);

    res.json({ success: true, message: "Image generated", creditBalance: user.creditBalance - 1, resultImage });
  } catch (error) {
    console.error("Error generating image:", error.message);
    res.json({ success: false, message: error.message });
  }
};
